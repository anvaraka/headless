// vite.config.ts
import { defineConfig } from "file:///Users/isaacsneddonjenkins/Desktop/projects/umi-headless/node_modules/.pnpm/vite@5.4.8_@types+node@22.7.4_sass@1.79.4/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/isaacsneddonjenkins/Desktop/projects/umi-headless/node_modules/.pnpm/vite-plugin-dts@4.2.3_@types+node@22.7.4_rollup@4.22.5_typescript@5.6.2_vite@5.4.8_@types+node@22.7.4_sass@1.79.4_/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0"
};

// vite.config.ts
import { glob } from "file:///Users/isaacsneddonjenkins/Desktop/projects/umi-headless/node_modules/.pnpm/glob@11.0.0/node_modules/glob/dist/esm/index.js";
import { relative, extname } from "path";
import { fileURLToPath } from "url";
var __vite_injected_original_import_meta_url = "file:///Users/isaacsneddonjenkins/Desktop/projects/umi-headless/packages/ui/vite.config.ts";
var vite_config_default = defineConfig({
  css: {
    preprocessorOptions: {
      scss: {
        // Optionally, add global styles or variables if needed
        // additionalData: `@import "./src/styles/global.scss";`, // Adjust if necessary
      }
    }
  },
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "ui",
      fileName: (format) => `index.${format}.js`,
      formats: ["cjs", "es"]
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)],
      input: Object.fromEntries(
        glob.sync("src/**/*.{ts,tsx}", {
          ignore: [
            "src/**/*.d.ts",
            "src/**/__docs__/**",
            "src/**/__test__/**"
          ]
        }).map((file) => [
          relative("src", file.slice(0, file.length - extname(file).length)),
          fileURLToPath(new URL(file, __vite_injected_original_import_meta_url))
        ])
      ),
      output: {
        assetFileNames: "assets/[name][extname]",
        entryFileNames: "[name].js"
      }
    },
    sourcemap: true,
    emptyOutDir: true
  },
  plugins: [dts()],
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: "./setupTests.ts"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
